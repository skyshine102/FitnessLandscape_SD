DF <- DF[which(!is.na(DF$x)),]
DF <- DF[which(!is.na(DF$y)),]
return(DF)
}
PDF <- function(DF){
PDF <- data.frame(matrix(NA,100,3))
colnames(PDF) <- c("XValue","YValue","Counts")
n <- 0
for(a in 0:9){
for(b in -a:(-a+9)){
n <- n+1
PDF$XValue[n] <- a
PDF$YValue[n] <- b
PDF$Counts[n] <- length(which(DF$x==a & DF$y==b))
}
}
return(PDF)
}
SDF <- function(DF){
SDF <- data.frame(matrix(NA,10,5))
colnames(SDF) <- c("XMean","YMean","YQ1","YMedian","YQ3")
for(c in 0:9){
indexBG <- which(DF$x==c)
SDF$XMean[c+1] <- c
SDF$YMean[c+1] <- mean(DF$y[indexBG], na.rm = T)
SDF$YQ1[c+1] <- as.numeric(quantile(DF$y[indexBG], 0.25, type = 2))
SDF$YMedian[c+1] <- as.numeric(quantile(DF$y[indexBG], 0.5, type = 2))
SDF$YQ3[c+1] <- as.numeric(quantile(DF$y[indexBG], 0.75, type = 2))
}
return(SDF)
}
SubstitutionEffect <- function(f){
Data <- read.table(file = paste0("../../data/Vienna Package Prediction/",f,"_Duplex.csv"), header = T, sep = ",") # input ordered and full data
char <- c("A","C","G","U")
BaseIndex <- matrix(data=c(0,0,0,3,3,3,2,2,2,1,1,1,3,2,1,0,2,1,0,3,1,0,3,2), nrow=12, ncol=2)
tiff(filename = paste0("../../Result/R_Substitution/",f,"_Duplex_total.tiff"), width = 1800, height = 4800, units = "px")
par(mai = c(.1, .1, .1, .1), mfrow = c(12,9))
for(k in 1:12){
i <- BaseIndex[k,1]
j <- BaseIndex[k,2]
for(site in 1:9){
DF <- SE(Data[,2],site,i,j) # DataFrame
PDF <- PDF(DF) # Plotting DataFrame
SDF <- SDF(DF) # Statistic DataFrame
plot(PDF$XValue, PDF$YValue, pch=20, col="gray64", cex=log10(PDF$Counts)*1.5+0.1, xlim=c(0,9), ylim=c(-9,9),
xlab="", ylab="", main="", axes=FALSE)
axis(side=1, at=0:9, cex.axis=1.5, font=2, labels = F)
axis(side=2, at=-9:9, cex.axis=1.5, font=2, labels = F)
box()
abline(h = 0)
BarIndex <- which((SDF$YQ3-SDF$YQ1)!=0)
arrows(x0=SDF$XMean[BarIndex], y0=SDF$YQ1[BarIndex], x1=SDF$XMean[BarIndex],
y1=SDF$YQ3[BarIndex], lwd=9, code=0, col="green")
points(SDF$XMean, SDF$YMedian, pch=16, col="blue", cex=4) # Median
points(SDF$XMean, SDF$YMean, pch=16, col="red", cex=4) # Mean
}
}
dev.off()
}
SubstitutionEffect("Vienna")
}
V_SubstitutionTotal_Duplex()
source('~/FitnessLandscape_SD/src/R/V_SubstituionEffect_MeanExtraction.r', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/V_SubstituionEffect_MeanExtraction.r', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/V_SubstituionEffect_MeanExtraction.r', echo=TRUE)
f = "Vienna"
Data <- read.table(file = paste0("../../data/Vienna Package Prediction/",f,"_Duplex.csv"), header = T, sep = ",") # input ordered and full data
i <- 2
j <- 1
PlotMat <- data.frame(matrix(data = NA, nrow = 10, ncol = 10))
colnames(PlotMat) <- c("Initial Length",paste0("Length Change (Position",1:9,")"))
PlotMat$`Initial Length` <- 0:9
for(site in 1:9){
DF <- SE(Data$Min,site,i,j) # DataFrame
#PDF <- PDF(DF) # Plotting DataFrame
SDF <- SDF(DF) # Statistic DataFrame
PlotMat[,site+1] <- SDF$YMean
}
for(site in 1:9){
DF <- SE(Data$Min,site,i,j) # DataFrame
PDF <- PDF(DF) # Plotting DataFrame
SDF <- SDF(DF) # Statistic DataFrame
PlotMat[,site+1] <- SDF$YMean
}
SDF
for(site in 1:9){
df <- SE(Data$Min,site,i,j) # DataFrame
pdf <- PDF(df) # Plotting DataFrame
sdf <- SDF(df) # Statistic DataFrame
PlotMat[,site+1] <- sdf$YMean
}
site = 1
DF <- SE(Data$Min,site,i,j) # DataFrame
source('~/FitnessLandscape_SD/src/R/V_SubstituionEffect_MeanExtraction.r', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/V_SubstituionEffect_MeanExtraction.r', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/V_SubstituionEffect_MeanExtraction.r', echo=TRUE)
### V_SubstitutionGtoC_Duplex ========================
V_SubstitutionGtoC_Duplex <- function(){
SE <- function(Exp,site,i,j){
if(i == j){return(NA)}
n <- length(Exp)
index1 <- which(0:(n-1)%/%4^(9-site)%%4 == i)
index2 <- which(0:(n-1)%/%4^(9-site)%%4 == j)
DF <- data.frame(Exp[index1], (Exp[index2]-Exp[index1]))
colnames(DF) <- c("x","y")
DF <- DF[which(!is.na(DF$x)),]
DF <- DF[which(!is.na(DF$y)),]
return(DF)
}
PDF <- function(DF){
PDF <- data.frame(matrix(NA,100,3))
colnames(PDF) <- c("XValue","YValue","Counts")
n <- 0
for(a in 0:9){
for(b in -a:(-a+9)){
n <- n+1
PDF$XValue[n] <- a
PDF$YValue[n] <- b
PDF$Counts[n] <- length(which(DF$x==a & DF$y==b))
}
}
return(PDF)
}
SDF <- function(DF){
SDF <- data.frame(matrix(NA,10,5))
colnames(SDF) <- c("XMean","YMean","YQ1","YMedian","YQ3")
for(c in 0:9){
indexBG <- which(DF$x==c)
SDF$XMean[c+1] <- c
SDF$YMean[c+1] <- mean(DF$y[indexBG], na.rm = T)
SDF$YQ1[c+1] <- as.numeric(quantile(DF$y[indexBG], 0.25, type = 2))
SDF$YMedian[c+1] <- as.numeric(quantile(DF$y[indexBG], 0.5, type=2))
SDF$YQ3[c+1] <- as.numeric(quantile(DF$y[indexBG], 0.75, type = 2))
}
return(SDF)
}
SubstituionViennaLength <- function(f){
Data <- read.table(file = paste0("../../data/Vienna Package Prediction/",f,"_Duplex.csv"), header = T, sep = ",") # input ordered and full data
i <- 2
j <- 1
PlotMat <- data.frame(matrix(data = NA, nrow = 10, ncol = 10))
colnames(PlotMat) <- c("Initial Length",paste0("Length Change (Position",1:9,")"))
PlotMat$`Initial Length` <- 0:9
for(site in 1:9){
DF <- SE(Data[,2],site,i,j) # DataFrame
PDF <- PDF(DF) # Plotting DataFrame
SDF <- SDF(DF) # Statistic DataFrame
PlotMat[,site+1] <- SDF$YMean
}
return(PlotMat)
}
f = "Vienna"
output <- SubstituionViennaLength(f)
write.table(x = output, file = paste0("../../Result/R_Substitution/",f,"_Duplex_total.csv"), quote = F, sep = ",", row.names = F)
}
V_SubstitutionGtoC_Duplex()
################################################ V_SubstitutionGtoC_SeqExp ################################################
SubstitutionGtoC <- function(f){
Data <- read.table(file=paste0("../../data/Read Count Table/UnionTable/",f,".csv"), header=T, sep=",")
Exp <- -Data$LogMean
i <- 2
j <- 1
PlotMat <- data.frame(matrix(data = NA, nrow = 20, ncol = 10))
colnames(PlotMat) <- c("Initial Expression",paste0("Expression Change (Position",1:9,")"))
BinMean <- seq(0,14,14/20)
BinMean <- rowMeans(cbind(BinMean[1:20],BinMean[2:21]))
PlotMat[,1] <- BinMean
for(site in 1:9){
SDF <- SubDF(Exp,site,i,j)
BDF <- V_BoxDF(Exp, DF=SDF)
PlotMat[,site+1] <- BDF$YMean
}
write.table(x = PlotMat, file = paste0("../../Result/R_Substitution/",f,"_GtoC_Mean.csv"),
sep = ",", quote = F, row.names = F)
}
V_SubstitutionTotal_Duplex("Vienna")
################################################ V_SubstitutionGtoC_SeqExp ################################################
V_SubstitutionTotal_Duplex <- function(f){
Data <- read.table(file=paste0("../../data/Read Count Table/UnionTable/",f,".csv"), header=T, sep=",")
Exp <- -Data$LogMean
i <- 2
j <- 1
PlotMat <- data.frame(matrix(data = NA, nrow = 20, ncol = 10))
colnames(PlotMat) <- c("Initial Expression",paste0("Expression Change (Position",1:9,")"))
BinMean <- seq(0,14,14/20)
BinMean <- rowMeans(cbind(BinMean[1:20],BinMean[2:21]))
PlotMat[,1] <- BinMean
for(site in 1:9){
SDF <- SubDF(Exp,site,i,j)
BDF <- V_BoxDF(Exp, DF=SDF)
PlotMat[,site+1] <- BDF$YMean
}
write.table(x = PlotMat, file = paste0("../../Result/R_Substitution/",f,"_GtoC_Mean.csv"),
sep = ",", quote = F, row.names = F)
}
V_SubstitutionTotal_Duplex("Vienna")
################################################ V_SubstitutionGtoC_SeqExp ################################################
V_SubstitutionTotal_Duplex <- function(f){
Data <- read.table(file=paste0("../../data/Read Count Table/UnionTable/",f,"_SeqExp.csv"), header=T, sep=",")
Exp <- -Data$LogMean
i <- 2
j <- 1
PlotMat <- data.frame(matrix(data = NA, nrow = 20, ncol = 10))
colnames(PlotMat) <- c("Initial Expression",paste0("Expression Change (Position",1:9,")"))
BinMean <- seq(0,14,14/20)
BinMean <- rowMeans(cbind(BinMean[1:20],BinMean[2:21]))
PlotMat[,1] <- BinMean
for(site in 1:9){
SDF <- SubDF(Exp,site,i,j)
BDF <- V_BoxDF(Exp, DF=SDF)
PlotMat[,site+1] <- BDF$YMean
}
write.table(x = PlotMat, file = paste0("../../Result/R_Substitution/",f,"_SeqExp_GtoC_Mean.csv"),
sep = ",", quote = F, row.names = F)
}
V_SubstitutionTotal_Duplex("Vienna")
################################################ V_SubstitutionGtoC_SeqExp ################################################
V_SubstitutionTotal_Duplex <- function(f){
Data <- read.table(file=paste0("../../data/Vienna Package Prediction/",f,"_SeqExp.csv"), header=T, sep=",")
Exp <- -Data$LogMean
i <- 2
j <- 1
PlotMat <- data.frame(matrix(data = NA, nrow = 20, ncol = 10))
colnames(PlotMat) <- c("Initial Expression",paste0("Expression Change (Position",1:9,")"))
BinMean <- seq(0,14,14/20)
BinMean <- rowMeans(cbind(BinMean[1:20],BinMean[2:21]))
PlotMat[,1] <- BinMean
for(site in 1:9){
SDF <- SubDF(Exp,site,i,j)
BDF <- V_BoxDF(Exp, DF=SDF)
PlotMat[,site+1] <- BDF$YMean
}
write.table(x = PlotMat, file = paste0("../../Result/R_Substitution/",f,"_SeqExp_GtoC_Mean.csv"),
sep = ",", quote = F, row.names = F)
}
V_SubstitutionTotal_Duplex("Vienna")
source('~/FitnessLandscape_SD/src/R/Substitution.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/NucleotideContent.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/NucleotideContent.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/PairwiseEpistasis.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/PairwiseEpistasis.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/PairwiseEpistasis.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/ViennaCompare.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/ViennaCompare.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/ViennaDuplex.R', echo=TRUE)
install.packages("vioplot")
source('~/FitnessLandscape_SD/src/R/ViennaDuplex.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/ViennaCompare.R', echo=TRUE)
source('~/FitnessLandscape_SD/src/R/Vienna_vs_exp.R', echo=TRUE)
################################################ dG vs. experimental data ################################################
### ====
ViennaCompare <- function(f){
cex = 3
Model <- read.table(file = "../../data/Vienna Package Prediction/Vienna_SeqExp.csv", header = T, sep = ",")
Experimental <- read.table(file = paste0("../../data/Read Count Table/UnionTable/",f,".csv"), header = T, sep = ",")
x <- -Model$LogMean
y <- Experimental$LogMean
min(x)
max(x)
min(y, na.rm = T)
max(y, na.rm = T)
n <- 20
BoxDF <- data.frame(matrix(data = NA, nrow = n, ncol = 6))
colnames(BoxDF) <- c("XMean","YMean", "YSD","YQ1","YMedian","YQ3")
BinList <- seq(0,14,14/n)
for(i in 1:n){
index <- which(BinList[i]<x & x<BinList[i+1])
BoxDF$XMean[i] <- mean(x[index], na.rm = T)
BoxDF$YMean[i] <- mean(y[index], na.rm = T)
BoxDF$YSD[i] <- sd(y[index], na.rm = T)
BoxDF$YQ1[i] <- as.numeric(quantile(y[index], 0.25, type = 2, na.rm = T))
BoxDF$YMedian[i] <- as.numeric(quantile(y[index], 0.5, type = 2, na.rm = T))
BoxDF$YQ3[i] <- as.numeric(quantile(y[index], 0.75, type = 2, na.rm = T))
}
tiff(filename = paste0("../../Result/R_Vienna_vs_exp/",f,"_dG_vs_exp.tiff"), width = 360, height = 360, units = "px")
plot(x, y, pch=".", xlab="", ylab="", xlim=c(0,14), ylim=c(0,3.2), axes=FALSE, yaxs="i", col="gray64", cex=cex)
axis(side = 1, at = seq(0,14,14/5), cex.axis = 1.5)
axis(side = 2, at = seq(0,3.2,3.2/4), cex.axis = 1.5)
box()
arrows(x0 = BoxDF$XMean, y0 = BoxDF$YMean-BoxDF$YSD, x1 = BoxDF$XMean, BoxDF$YMean+BoxDF$YSD,
length = .06, lwd = 2, angle = 90, code = 3, col = "red") # Mean
points(x = BoxDF$XMean, y = BoxDF$YMean, pch = 20, col = "red", cex = 2.5) # Mean
print(cor.test(x, y, method = "pearson", exact = FALSE))
print(cor.test(x, y, method = "spearman", exact = FALSE))
dev.off()
}
### ====
ViennaCompare("arti_SDR_union_count25")
x
y
fit <- lm(y~x)
fit
summary(fit)
cor.test(x, y, method = "pearson", exact = FALSE)
GGGG <- cor.test(x, y, method = "pearson", exact = FALSE)
GGGG
View(GGGG)
cor.test(x, y, method = "pearson", exact = FALSE)$p.value
################################################ dG vs. experimental data ################################################
### ====
ViennaCompare <- function(f){
cex = 3
Model <- read.table(file = "../../data/Vienna Package Prediction/Vienna_SeqExp.csv", header = T, sep = ",")
Experimental <- read.table(file = paste0("../../data/Read Count Table/UnionTable/",f,".csv"), header = T, sep = ",")
x <- -Model$LogMean
y <- Experimental$LogMean
min(x)
max(x)
min(y, na.rm = T)
max(y, na.rm = T)
n <- 20
BoxDF <- data.frame(matrix(data = NA, nrow = n, ncol = 6))
colnames(BoxDF) <- c("XMean","YMean", "YSD","YQ1","YMedian","YQ3")
BinList <- seq(0,14,14/n)
for(i in 1:n){
index <- which(BinList[i]<x & x<BinList[i+1])
BoxDF$XMean[i] <- mean(x[index], na.rm = T)
BoxDF$YMean[i] <- mean(y[index], na.rm = T)
BoxDF$YSD[i] <- sd(y[index], na.rm = T)
BoxDF$YQ1[i] <- as.numeric(quantile(y[index], 0.25, type = 2, na.rm = T))
BoxDF$YMedian[i] <- as.numeric(quantile(y[index], 0.5, type = 2, na.rm = T))
BoxDF$YQ3[i] <- as.numeric(quantile(y[index], 0.75, type = 2, na.rm = T))
}
tiff(filename = paste0("../../Result/R_Vienna_vs_exp/",f,"_dG_vs_exp.tiff"), width = 360, height = 360, units = "px")
plot(x, y, pch=".", xlab="", ylab="", xlim=c(0,14), ylim=c(0,3.2), axes=FALSE, yaxs="i", col="gray64", cex=cex)
axis(side = 1, at = seq(0,14,14/5), cex.axis = 1.5)
axis(side = 2, at = seq(0,3.2,3.2/4), cex.axis = 1.5)
box()
arrows(x0 = BoxDF$XMean, y0 = BoxDF$YMean-BoxDF$YSD, x1 = BoxDF$XMean, BoxDF$YMean+BoxDF$YSD,
length = .06, lwd = 2, angle = 90, code = 3, col = "red") # Mean
points(x = BoxDF$XMean, y = BoxDF$YMean, pch = 20, col = "red", cex = 2.5) # Mean
print(cor.test(x, y, method = "pearson", exact = FALSE)$estimate)
print(cor.test(x, y, method = "pearson", exact = FALSE)$p.value)
print(cor.test(x, y, method = "spearman", exact = FALSE)$estimate)
print(cor.test(x, y, method = "spearman", exact = FALSE)$p.value)
dev.off()
}
### ====
ViennaCompare("arti_SDR_union_count25")
ViennaCompare("dmsC_SDR_union_count25")
ViennaCompare("fepB_SDR_union_count25")
View(GGGG)
################################################ dG vs. experimental data ################################################
### ====
ViennaCompare <- function(f){
cex = 3
Model <- read.table(file = "../../data/Vienna Package Prediction/Vienna_SeqExp.csv", header = T, sep = ",")
Experimental <- read.table(file = paste0("../../data/Read Count Table/UnionTable/",f,".csv"), header = T, sep = ",")
x <- -Model$LogMean
y <- Experimental$LogMean
min(x)
max(x)
min(y, na.rm = T)
max(y, na.rm = T)
n <- 20
BoxDF <- data.frame(matrix(data = NA, nrow = n, ncol = 6))
colnames(BoxDF) <- c("XMean","YMean", "YSD","YQ1","YMedian","YQ3")
BinList <- seq(0,14,14/n)
for(i in 1:n){
index <- which(BinList[i]<x & x<BinList[i+1])
BoxDF$XMean[i] <- mean(x[index], na.rm = T)
BoxDF$YMean[i] <- mean(y[index], na.rm = T)
BoxDF$YSD[i] <- sd(y[index], na.rm = T)
BoxDF$YQ1[i] <- as.numeric(quantile(y[index], 0.25, type = 2, na.rm = T))
BoxDF$YMedian[i] <- as.numeric(quantile(y[index], 0.5, type = 2, na.rm = T))
BoxDF$YQ3[i] <- as.numeric(quantile(y[index], 0.75, type = 2, na.rm = T))
}
tiff(filename = paste0("../../Result/R_Vienna_vs_exp/",f,"_dG_vs_exp.tiff"), width = 360, height = 360, units = "px")
plot(x, y, pch=".", xlab="", ylab="", xlim=c(0,14), ylim=c(0,3.2), axes=FALSE, yaxs="i", col="gray64", cex=cex)
axis(side = 1, at = seq(0,14,14/5), cex.axis = 1.5)
axis(side = 2, at = seq(0,3.2,3.2/4), cex.axis = 1.5)
box()
arrows(x0 = BoxDF$XMean, y0 = BoxDF$YMean-BoxDF$YSD, x1 = BoxDF$XMean, BoxDF$YMean+BoxDF$YSD,
length = .06, lwd = 2, angle = 90, code = 3, col = "red") # Mean
points(x = BoxDF$XMean, y = BoxDF$YMean, pch = 20, col = "red", cex = 2.5) # Mean
print(cor.test(x, y, method = "pearson", exact = FALSE)$estimate)
#print(cor.test(x, y, method = "pearson", exact = FALSE)$p.value)
print(cor.test(x, y, method = "spearman", exact = FALSE)$estimate)
#print(cor.test(x, y, method = "spearman", exact = FALSE)$p.value)
dev.off()
}
### ====
ViennaCompare("arti_SDR_union_count25")
ViennaCompare("dmsC_SDR_union_count25")
ViennaCompare("fepB_SDR_union_count25")
clear
clear()
clean
clean()
source('~/FitnessLandscape_SD/src/R/Vienna_vs_exp.R', echo=TRUE)
################################################ dG vs. experimental data ################################################
### ====
ViennaCompare <- function(f){
cex = 3
Model <- read.table(file = "../../data/Vienna Package Prediction/Vienna_SeqExp.csv", header = T, sep = ",")
Experimental <- read.table(file = paste0("../../data/Read Count Table/UnionTable/",f,".csv"), header = T, sep = ",")
x <- -Model$LogMean
y <- Experimental$LogMean
min(x)
max(x)
min(y, na.rm = T)
max(y, na.rm = T)
n <- 20
BoxDF <- data.frame(matrix(data = NA, nrow = n, ncol = 6))
colnames(BoxDF) <- c("XMean","YMean", "YSD","YQ1","YMedian","YQ3")
BinList <- seq(0,14,14/n)
for(i in 1:n){
index <- which(BinList[i]<x & x<BinList[i+1])
BoxDF$XMean[i] <- mean(x[index], na.rm = T)
BoxDF$YMean[i] <- mean(y[index], na.rm = T)
BoxDF$YSD[i] <- sd(y[index], na.rm = T)
BoxDF$YQ1[i] <- as.numeric(quantile(y[index], 0.25, type = 2, na.rm = T))
BoxDF$YMedian[i] <- as.numeric(quantile(y[index], 0.5, type = 2, na.rm = T))
BoxDF$YQ3[i] <- as.numeric(quantile(y[index], 0.75, type = 2, na.rm = T))
}
tiff(filename = paste0("../../Result/R_Vienna_vs_exp/",f,"_dG_vs_exp.tiff"), width = 360, height = 360, units = "px")
plot(x, y, pch=".", xlab="", ylab="", xlim=c(0,14), ylim=c(0,3.2), axes=FALSE, yaxs="i", col="gray64", cex=cex)
axis(side = 1, at = seq(0,14,14/5), cex.axis = 1.5)
axis(side = 2, at = seq(0,3.2,3.2/4), cex.axis = 1.5)
box()
arrows(x0 = BoxDF$XMean, y0 = BoxDF$YMean-BoxDF$YSD, x1 = BoxDF$XMean, BoxDF$YMean+BoxDF$YSD,
length = .06, lwd = 2, angle = 90, code = 3, col = "red") # Mean
points(x = BoxDF$XMean, y = BoxDF$YMean, pch = 20, col = "red", cex = 2.5) # Mean
print(cor.test(x, y, method = "pearson", exact = FALSE)$estimate)
print(cor.test(x, y, method = "pearson", exact = FALSE)$p.value)
print(cor.test(x, y, method = "spearman", exact = FALSE)$estimate)
print(cor.test(x, y, method = "spearman", exact = FALSE)$p.value)
write.table(x = data.frame(x,y), file = paste0("../../Result/R_Vienna_vs_exp/",f,"_dG_vs_exp.csv"), sep = ",", row.names = F)
dev.off()
}
### ====
ViennaCompare("arti_SDR_union_count25")
ViennaCompare("dmsC_SDR_union_count25")
ViennaCompare("fepB_SDR_union_count25")
source('~/FitnessLandscape_SD/src/R/Vienna_vs_exp.R', echo=TRUE)
### choose bin size and get the information of each bin ====
BinDataFrame <- function(x, y, xlim, n){
BDF <- data.frame(matrix(data = NA, nrow = n, ncol = 6))
colnames(BDF) <- c("XMean","YMean", "YSD","YQ1","YMedian","YQ3")
BinList <- seq(xlim[1], xlim[2], (xlim[2]-xlim[1])/n)
for(i in 1:n){
index <- which(BinList[i]<=x & x<BinList[i+1])
BDF$XMean[i] <- mean(x[index], na.rm = T)
BDF$YMean[i] <- mean(y[index], na.rm = T)
BDF$YSD[i] <- sd(y[index], na.rm = T)
BDF$YQ1[i] <- as.numeric(quantile(y[index], 0.25, type = 2, na.rm = T))
BDF$YMedian[i] <- as.numeric(quantile(y[index], 0.5, type = 2, na.rm = T))
BDF$YQ3[i] <- as.numeric(quantile(y[index], 0.75, type = 2, na.rm = T))
}
return(BDF)
}
### main function ====
## data processing
dG <- read.table(file = "../../data/Vienna Package Prediction/Vienna_SeqExp.csv", header = T, sep = ",")
duplex <- read.table(file = "../../data/Vienna Package Prediction/Vienna_Duplex.csv", header = T, sep = ",")
x <- -dG$LogMean
y <- duplex[,2]
BDF <- BinDataFrame(x = x, y = y, xlim = c(0,14), n = 20)
print(cor.test(x, y, method = "pearson", exact = FALSE)$estimate)
print(cor.test(x, y, method = "pearson", exact = FALSE)$p.value)
write.table(x = data.frame(x,y), file = paste0("../../Result/R_Vienna_vs_exp/",f,"dG_vs_duplex.csv"), sep = ",", row.names = F)
## plotting
svg(filename = "../../Result/R_Vienna_vs_exp/dG_vs_duplex.svg", width = 6, height = 6) # open picture file
plot(0, 0, type="n", xlab="", ylab="", xlim=c(0,14), ylim=c(-0.5,9.5), axes=FALSE)
axis(side=1, at=seq(0,14,14/5), cex.axis=1.5)
axis(side=2, at=seq(0,9,1), cex.axis=1.5)
box()
library(vioplot)
vioplot(c(x[y==0],0.001), col="gray", horizontal=TRUE, at=0, add=TRUE, lwd=5, border="gray")
for(i in 2:9){vioplot(x[y==i], col="#e3e4e5", horizontal=TRUE, at=i, add=TRUE, lwd=1, lty=1, lineCol="gray", border="gray")}
arrows(x0=BDF$XMean, y0=BDF$YMean-BDF$YSD, x1=BDF$XMean, BDF$YMean+BDF$YSD, length=.06, lwd=2, angle=90, code=3, col="red")
points(x=BDF$XMean, y=BDF$YMean, pch=20, col="red", cex=2.5)
dev.off() # close picture file
################################################ dG vs. duplex length ################################################
### choose bin size and get the information of each bin ====
BinDataFrame <- function(x, y, xlim, n){
BDF <- data.frame(matrix(data = NA, nrow = n, ncol = 6))
colnames(BDF) <- c("XMean","YMean", "YSD","YQ1","YMedian","YQ3")
BinList <- seq(xlim[1], xlim[2], (xlim[2]-xlim[1])/n)
for(i in 1:n){
index <- which(BinList[i]<=x & x<BinList[i+1])
BDF$XMean[i] <- mean(x[index], na.rm = T)
BDF$YMean[i] <- mean(y[index], na.rm = T)
BDF$YSD[i] <- sd(y[index], na.rm = T)
BDF$YQ1[i] <- as.numeric(quantile(y[index], 0.25, type = 2, na.rm = T))
BDF$YMedian[i] <- as.numeric(quantile(y[index], 0.5, type = 2, na.rm = T))
BDF$YQ3[i] <- as.numeric(quantile(y[index], 0.75, type = 2, na.rm = T))
}
return(BDF)
}
### main function ====
## data processing
dG <- read.table(file = "../../data/Vienna Package Prediction/Vienna_SeqExp.csv", header = T, sep = ",")
duplex <- read.table(file = "../../data/Vienna Package Prediction/Vienna_Duplex.csv", header = T, sep = ",")
x <- -dG$LogMean
y <- duplex[,2]
BDF <- BinDataFrame(x = x, y = y, xlim = c(0,14), n = 20)
print(cor.test(x, y, method = "pearson", exact = FALSE)$estimate)
print(cor.test(x, y, method = "pearson", exact = FALSE)$p.value)
write.table(x = data.frame(x,y), file = paste0("../../Result/R_Vienna_vs_exp/dG_vs_duplex.csv"), sep = ",", row.names = F)
## plotting
svg(filename = "../../Result/R_Vienna_vs_exp/dG_vs_duplex.svg", width = 6, height = 6) # open picture file
plot(0, 0, type="n", xlab="", ylab="", xlim=c(0,14), ylim=c(-0.5,9.5), axes=FALSE)
axis(side=1, at=seq(0,14,14/5), cex.axis=1.5)
axis(side=2, at=seq(0,9,1), cex.axis=1.5)
box()
library(vioplot)
vioplot(c(x[y==0],0.001), col="gray", horizontal=TRUE, at=0, add=TRUE, lwd=5, border="gray")
for(i in 2:9){vioplot(x[y==i], col="#e3e4e5", horizontal=TRUE, at=i, add=TRUE, lwd=1, lty=1, lineCol="gray", border="gray")}
arrows(x0=BDF$XMean, y0=BDF$YMean-BDF$YSD, x1=BDF$XMean, BDF$YMean+BDF$YSD, length=.06, lwd=2, angle=90, code=3, col="red")
points(x=BDF$XMean, y=BDF$YMean, pch=20, col="red", cex=2.5)
dev.off() # close picture file
